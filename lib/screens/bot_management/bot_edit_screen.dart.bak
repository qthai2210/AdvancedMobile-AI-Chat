// Implements a tabbed interface for bot editing with three main sections:
// 1. Details Tab: Edit basic info like name, description, and instructions
// 2. Knowledge Tab: Link and manage knowledge bases for this bot
// 3. Chat Settings Tab: Configure model parameters and chat behavior

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';

import 'package:aichatbot/data/models/assistant/assistant_model.dart';
import 'package:aichatbot/data/models/knowledge/knowledge_model.dart';
import 'package:aichatbot/models/ai_bot_model.dart';
import 'package:aichatbot/presentation/bloc/bot/bot_bloc.dart';
import 'package:aichatbot/presentation/bloc/bot/bot_event.dart';
import 'package:aichatbot/presentation/bloc/bot/bot_state.dart';
import 'package:aichatbot/presentation/bloc/knowledge/knowledge_bloc.dart';
import 'package:aichatbot/presentation/bloc/knowledge/knowledge_event.dart';
import 'package:aichatbot/presentation/bloc/knowledge/knowledge_state.dart';
import 'package:aichatbot/core/services/bloc_manager.dart';
import 'package:aichatbot/core/di/injection_container.dart';
import 'package:aichatbot/widgets/knowledge/knowledge_base_selector_dialog.dart';
import 'bot_details_tab.dart';

/// A screen for editing bot details with a tabbed interface.
/// This screen allows users to:
/// * Edit basic bot properties
/// * Manage knowledge bases
/// * Configure chat settings
class BotEditScreen extends StatefulWidget {

  final AIBot bot;
  final AssistantModel assistantModel;

  const BotEditScreen({
    Key? key,
    required this.bot,
    required this.assistantModel,
  }) : super(key: key);

  @override
  State<BotEditScreen> createState() => _BotEditScreenState();
}

class _BotEditScreenState extends State<BotEditScreen>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  TextEditingController _nameController = TextEditingController();
  TextEditingController _descriptionController = TextEditingController();
  TextEditingController _instructionsController = TextEditingController();
  TextEditingController _telegramBotTokenController = TextEditingController();
  TextEditingController _slackBotTokenController = TextEditingController();
  TextEditingController _slackClientIdController = TextEditingController();
  TextEditingController _slackClientSecretController = TextEditingController();
  TextEditingController _slackSigningSecretController = TextEditingController();  bool _isLoading = false;
  bool _hasChanges = false;
  bool _isPublishingToTelegram = false;
  bool _isValidatingTelegramBot = false;
  bool _isValidatingSlackBot = false;
  bool _isPublishingToSlack = false;
  String? _telegramBotUrl;
  String? _slackBotUrl;
  Map<String, dynamic>? _validatedBotInfo;
  Map<String, dynamic>? _validatedSlackBotInfo;

  @override
  void initState() {
    super.initState();

    // Initialize tab controller
    _tabController = TabController(length: 3, vsync: this);

    // Set initial values for text controllers
    _nameController.text = widget.assistantModel.assistantName;
    _descriptionController.text = widget.assistantModel.description ?? '';
    _instructionsController.text = widget.assistantModel.instructions ?? '';

    // Listen for changes to track if form is dirty
    _nameController.addListener(_onFieldChanged);
    _descriptionController.addListener(_onFieldChanged);
    _instructionsController.addListener(_onFieldChanged);

    // Reset validation state when token changes
    _telegramBotTokenController.addListener(() {
      if (_validatedBotInfo != null) {
        setState(() {
          _validatedBotInfo = null;
        });
      }
    });

    // Fetch the assistant's knowledge bases when the screen loads
    _fetchAssistantKnowledges();
  }

  @override
  void dispose() {
    _tabController.dispose();
    _nameController.dispose();
    _descriptionController.dispose();
    _instructionsController.dispose();
    _telegramBotTokenController.dispose();
    _slackBotTokenController.dispose();
    _slackClientIdController.dispose();
    _slackClientSecretController.dispose();
    _slackSigningSecretController.dispose();
    super.dispose();
  }

  void _onFieldChanged() {
    final nameChanged =
        _nameController.text != widget.assistantModel.assistantName;
    final descriptionChanged = _descriptionController.text !=
        (widget.assistantModel.description ?? '');
    final instructionsChanged = _instructionsController.text !=
        (widget.assistantModel.instructions ?? '');

    final newHasChanges =
        nameChanged || descriptionChanged || instructionsChanged;

    if (newHasChanges != _hasChanges) {
      setState(() {
        _hasChanges = newHasChanges;
      });
    }
  }

  void _saveChanges() {
    if (_nameController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Assistant name cannot be empty'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    setState(() => _isLoading = true);

    // Dispatch the update event
    sl<BlocManager>().getBloc<BotBloc>(() => sl<BotBloc>()).add(
          UpdateAssistantEvent(
            assistantId: widget.assistantModel.id,
            assistantName: _nameController.text.trim(),
            description: _descriptionController.text.trim().isNotEmpty
                ? _descriptionController.text.trim()
                : null,
            instructions: _instructionsController.text.trim().isNotEmpty
                ? _instructionsController.text.trim()
                : null,
          ),
        );
  }

  void _linkKnowledgeToAssistant() {
    final state = context.read<KnowledgeBloc>().state;

    // Get the IDs of knowledge bases already linked to this assistant
    List<String> linkedKnowledgeIds = [];
    if (state is KnowledgeLoaded) {
      linkedKnowledgeIds = state.knowledges
          .where((knowledge) => knowledge.id != null)
          .map((knowledge) => knowledge.id!)
          .toList();
    }

    // Show dialog with list of all available knowledge bases
    showDialog(
      context: context,
      builder: (context) {
        return KnowledgeBaseSelectorDialog(
          // Don't pass assistantId to show all available knowledge bases
          // Pass the list of already linked knowledge base IDs to exclude them
          excludeKnowledgeIds: linkedKnowledgeIds,
          onKnowledgeSelected: (String knowledgeId, String knowledgeName) {
            // Dispatch the LinkKnowledgeToAssistantEvent
            context.read<BotBloc>().add(
                  LinkKnowledgeToAssistantEvent(
                    assistantId: widget.assistantModel.id,
                    knowledgeId: knowledgeId,
                    accessToken:
                        null, // Replace with actual auth token if needed
                  ),
                );

            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Linking knowledge base: $knowledgeName'),
              ),
            );
          },
        );
      },
    );
  }

  /// Fetch knowledge bases attached to this assistant
  void _fetchAssistantKnowledges() {
    sl<KnowledgeBloc>().add(
      FetchAssistantKnowledgesEvent(
        assistantId: widget.assistantModel.id,
        limit: 50,
      ),
    );
  }

  /// Shows a confirmation dialog and removes the knowledge base from the assistant if confirmed
  void _confirmRemoveKnowledge(KnowledgeModel knowledge) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Remove "${knowledge.knowledgeName}"?'),
        content: Text(
            'Are you sure you want to remove this knowledge base from the assistant? '
            'This action does not delete the knowledge base itself.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _removeKnowledgeFromAssistant(knowledge);
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Remove'),
          ),
        ],
      ),
    );
  }

  /// Removes a knowledge base from the assistant
  void _removeKnowledgeFromAssistant(KnowledgeModel knowledge) {
    // Get assistant ID and knowledge ID
    final assistantId = widget.assistantModel.id;
    final knowledgeId = knowledge.id;

    // Check if both IDs are available (and not empty)
    if (assistantId.isNotEmpty && knowledgeId != null) {
      context.read<BotBloc>().add(
            RemoveKnowledgeFromAssistantEvent(
              assistantId: assistantId,
              knowledgeId: knowledgeId,
              xJarvisGuid: '', // Empty GUID is acceptable per the API
            ),
          );

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Removing knowledge base: ${knowledge.knowledgeName}'),
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Error: Invalid assistant or knowledge ID'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Method to validate Telegram bot token
  void _validateTelegramBot() {
    final botToken = _telegramBotTokenController.text.trim();
    if (botToken.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please enter a Telegram bot token'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    setState(() {
      _isValidatingTelegramBot = true;
    });

    // Dispatch the validation event to the BotBloc
    context.read<BotBloc>().add(
          ValidateTelegramBotEvent(
            botToken: botToken,
          ),
        );
  }

  // Method to handle Telegram bot publishing
  void _publishTelegramBot() {
    // Check if we've already validated the bot token
    if (_validatedBotInfo == null) {
      // If not validated yet, run validation first
      _validateTelegramBot();
      return;
    }

    final botToken = _telegramBotTokenController.text.trim();

    setState(() {
      _isPublishingToTelegram = true;
    });

    // Dispatch the event to the BotBloc
    context.read<BotBloc>().add(
          PublishTelegramBotEvent(
            assistantId: widget.assistantModel.id,
            botToken: botToken,
          ),
        );
  }

  // Method to validate Slack bot configuration
  void _validateSlackBot() {
    final botToken = _slackBotTokenController.text.trim();
    final clientId = _slackClientIdController.text.trim();
    final clientSecret = _slackClientSecretController.text.trim();
    final signingSecret = _slackSigningSecretController.text.trim();

    // Validate input fields
    if (botToken.isEmpty ||
        clientId.isEmpty ||
        clientSecret.isEmpty ||
        signingSecret.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please fill in all Slack configuration fields'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    setState(() {
      _isValidatingSlackBot = true;
    });

    // Dispatch the validation event to the BotBloc
    context.read<BotBloc>().add(
          ValidateSlackBotEvent(
            botToken: botToken,
            clientId: clientId,
            clientSecret: clientSecret,
            signingSecret: signingSecret,
          ),
        );
  }

  // Method to handle Slack bot publishing
  void _publishSlackBot() {
    // Check if we've already validated the bot configuration
    if (_validatedSlackBotInfo == null) {
      // If not validated yet, run validation first
      _validateSlackBot();
      return;
    }

    final botToken = _slackBotTokenController.text.trim();
    final clientId = _slackClientIdController.text.trim();
    final clientSecret = _slackClientSecretController.text.trim();
    final signingSecret = _slackSigningSecretController.text.trim();

    setState(() {
      _isPublishingToSlack = true;
    });

    // Dispatch the publish event to the BotBloc
    context.read<BotBloc>().add(
          PublishSlackBotEvent(
            assistantId: widget.assistantModel.id,
            botToken: botToken,
            clientId: clientId,
            clientSecret: clientSecret,
            signingSecret: signingSecret,
          ),
        );
  }

  // Method to build the Knowledge Tab
  Widget _buildKnowledgeTab() {
    return BlocBuilder<KnowledgeBloc, KnowledgeState>(
      builder: (context, state) {
        if (state is KnowledgeLoading) {
          return const Center(child: CircularProgressIndicator());
        } else if (state is KnowledgeLoaded) {
          final knowledges = state.knowledges;
          
          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Add Knowledge button
                ElevatedButton.icon(
                  onPressed: _linkKnowledgeToAssistant,
                  icon: const Icon(Icons.add),
                  label: const Text('Add Knowledge Base'),
                ),
                const SizedBox(height: 16),
                // Knowledge list heading
                const Text(
                  'Linked Knowledge Bases',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                // Knowledge list
                knowledges.isEmpty
                    ? const Center(
                        child: Padding(
                          padding: EdgeInsets.all(16.0),
                          child: Text(
                            'No knowledge bases linked to this assistant.',
                            style: TextStyle(fontStyle: FontStyle.italic),
                          ),
                        ),
                      )
                    : Expanded(
                        child: ListView.builder(
                          itemCount: knowledges.length,
                          itemBuilder: (context, index) {
                            final knowledge = knowledges[index];
                            return Card(
                              margin: const EdgeInsets.only(bottom: 8.0),
                              child: ListTile(
                                title: Text(knowledge.knowledgeName),
                                subtitle: Text(
                                  knowledge.description ?? 'No description',
                                ),
                                trailing: IconButton(
                                  icon: const Icon(Icons.delete_outline,
                                      color: Colors.red),
                                  onPressed: () =>
                                      _confirmRemoveKnowledge(knowledge),
                                ),
                              ),
                            );
                          },
                        ),
                      ),
              ],
            ),
          );
        } else {
          return Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(Icons.error_outline, size: 48, color: Colors.orange),
                const SizedBox(height: 16),
                const Text('Failed to load knowledge bases'),
                const SizedBox(height: 8),
                ElevatedButton(
                  onPressed: _fetchAssistantKnowledges,
                  child: const Text('Try Again'),
                ),
              ],
            ),
          );
        }
      },
    );
  }

  // Method to build the Chat Settings Tab
  Widget _buildChatSettingsTab() {
    return const Center(
      child: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.settings, size: 48, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'Chat settings will be implemented soon.',
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
      ),
    );
  }
  
  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<BotBloc>.value(
          value: sl<BlocManager>().getBloc<BotBloc>(() => sl<BotBloc>()),
        ),
        BlocProvider<KnowledgeBloc>.value(
          value: sl<KnowledgeBloc>(),
        ),
      ],
      child: MultiBlocListener(
        listeners: [
          BlocListener<BotBloc, BotState>(
            listener: (context, state) {
              if (state is AssistantUpdating) {
                // Keep loading indicator
              } else if (state is AssistantUpdated) {
                setState(() => _isLoading = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        '${state.assistant.assistantName} updated successfully'),
                    backgroundColor: Colors.green,
                  ),
                );

                // Go back to previous screen
                if (context.mounted) context.pop();
              } else if (state is AssistantUpdateFailed) {
                setState(() => _isLoading = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Update failed: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is ValidatingTelegramBot) {
                // Keep validating indicator
              } else if (state is TelegramBotValidated) {
                setState(() {
                  _isValidatingTelegramBot = false;
                  _validatedBotInfo = state.botInfo;
                }); // Show validation success message with bot info
                final botUsername = state.botInfo['username'] as String? ?? '';
                final botId = state.botInfo['id'].toString();

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Telegram bot validated successfully: @$botUsername (ID: $botId)'),
                    backgroundColor: Colors.green,
                    duration: const Duration(seconds: 3),
                  ),
                );

                // Automatically publish the bot after successful validation
                _publishTelegramBot();
              } else if (state is TelegramBotValidationFailed) {
                setState(() => _isValidatingTelegramBot = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Bot validation failed: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is PublishingTelegramBot) {
                // Keep publishing indicator
              } else if (state is TelegramBotPublished) {
                setState(() {
                  _isPublishingToTelegram = false;
                  _telegramBotUrl = state.telegramBotUrl;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Telegram bot published successfully'),
                    backgroundColor: Colors.green,
                  ),
                );
              } else if (state is TelegramBotPublishFailed) {
                setState(() => _isPublishingToTelegram = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Failed to publish Telegram bot: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is AssistantKnowledgeLinked) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Knowledge base linked successfully'),
                    backgroundColor: Colors.green,
                  ),
                );

                // Refresh the list of knowledge bases after linking
                _fetchAssistantKnowledges();
              } else if (state is AssistantRemovingKnowledge) {
                // Show loading indicator or status if needed
              } else if (state is AssistantKnowledgeRemoved) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Knowledge base removed successfully'),
                    backgroundColor: Colors.green,
                  ),
                );

                // Refresh the list of knowledge bases after removal
                _fetchAssistantKnowledges();
              } else if (state is AssistantKnowledgeRemoveFailed) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Failed to remove knowledge base: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is AssistantKnowledgeLinkFailed) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content:
                        Text('Failed to link knowledge base: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is ValidatingSlackBot) {
                // Keep validating indicator
              } else if (state is SlackBotValidated) {
                setState(() {
                  _isValidatingSlackBot = false;
                  _validatedSlackBotInfo = state.botInfo;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content:
                        Text('Slack bot configuration validated successfully'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 3),
                  ),
                );
                
                // Automatically publish the bot after successful validation
                _publishSlackBot();
              } else if (state is SlackBotValidationFailed) {
                setState(() => _isValidatingSlackBot = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Slack validation failed: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is PublishingSlackBot) {
                // Keep publishing indicator
              } else if (state is SlackBotPublished) {
                setState(() {
                  _isPublishingToSlack = false;
                  _slackBotUrl = state.slackBotUrl;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Slack bot published successfully'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 3),
                  ),
                );

                // If the URL is available, we could display it or offer to open it
                if (_slackBotUrl != null && _slackBotUrl!.isNotEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Slack authorization URL: ${_slackBotUrl!.substring(0, 50)}...'),
                      duration: const Duration(seconds: 10),
                      action: SnackBarAction(
                        label: 'COPY',
                        onPressed: () {
                          Clipboard.setData(ClipboardData(text: _slackBotUrl!));
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('URL copied to clipboard'),
                              duration: Duration(seconds: 1),
                            ),
                          );
                        },
                      ),
                    ),
                  );
                }
              } else if (state is SlackBotPublishFailed) {
                setState(() => _isPublishingToSlack = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Failed to publish Slack bot: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
          ),
        ],
        child: Scaffold(
          appBar: AppBar(
            title: Text('Edit ${widget.bot.name}'),
            actions: [
              // Save button - only show if there are changes to save
              if (_hasChanges)
                IconButton(
                  onPressed: _isLoading ? null : _saveChanges,
                  icon: _isLoading
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: Colors.white,
                          ),
                        )
                      : const Icon(Icons.save),
                  tooltip: 'Save Changes',
                ),
            ],
            bottom: TabBar(
              controller: _tabController,
              tabs: const [
                Tab(text: 'Details', icon: Icon(Icons.info_outline)),
                Tab(text: 'Knowledge', icon: Icon(Icons.psychology_outlined)),
                Tab(text: 'Chat Settings', icon: Icon(Icons.settings_outlined)),
              ],
            ),
          ),
          body: TabBarView(
            controller: _tabController,
            children: [
              // Details Tab
              BotDetailsTab(
                bot: widget.bot,
                assistantModel: widget.assistantModel,
                nameController: _nameController,
                descriptionController: _descriptionController,
                instructionsController: _instructionsController,
                telegramBotTokenController: _telegramBotTokenController,
                slackBotTokenController: _slackBotTokenController,
                slackClientIdController: _slackClientIdController,
                slackClientSecretController: _slackClientSecretController,
                slackSigningSecretController: _slackSigningSecretController,
                isValidatingTelegramBot: _isValidatingTelegramBot,
                isPublishingToTelegram: _isPublishingToTelegram,
                isValidatingSlackBot: _isValidatingSlackBot,
                isPublishingToSlack: _isPublishingToSlack,
                validatedBotInfo: _validatedBotInfo,
                validatedSlackBotInfo: _validatedSlackBotInfo,
                telegramBotUrl: _telegramBotUrl,
                slackBotUrl: _slackBotUrl,
                validateTelegramBot: _validateTelegramBot,
                publishTelegramBot: _publishTelegramBot,
                validateSlackBot: _validateSlackBot,
                publishSlackBot: _publishSlackBot,
              ),

              // Knowledge Tab
              _buildKnowledgeTab(),

              // Chat Settings Tab
              _buildChatSettingsTab(),
            ],
          ),
        ),

                // Go back to previous screen
                if (context.mounted) context.pop();
              } else if (state is AssistantUpdateFailed) {
                setState(() => _isLoading = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Update failed: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is ValidatingTelegramBot) {
                // Keep validating indicator
              } else if (state is TelegramBotValidated) {
                setState(() {
                  _isValidatingTelegramBot = false;
                  _validatedBotInfo = state.botInfo;
                }); // Show validation success message with bot info
                final botUsername = state.botInfo['username'] as String? ?? '';
                final botId = state.botInfo['id'].toString();

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Telegram bot validated successfully: @$botUsername (ID: $botId)'),
                    backgroundColor: Colors.green,
                    duration: const Duration(seconds: 3),
                  ),
                );

                // Automatically publish the bot after successful validation
                _publishTelegramBot();
              } else if (state is TelegramBotValidationFailed) {
                setState(() => _isValidatingTelegramBot = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Bot validation failed: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is PublishingTelegramBot) {
                // Keep publishing indicator
              } else if (state is TelegramBotPublished) {
                setState(() {
                  _isPublishingToTelegram = false;
                  _telegramBotUrl = state.telegramBotUrl;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Telegram bot published successfully'),
                    backgroundColor: Colors.green,
                  ),
                );
              } else if (state is TelegramBotPublishFailed) {
                setState(() => _isPublishingToTelegram = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Failed to publish Telegram bot: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is AssistantKnowledgeLinked) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Knowledge base linked successfully'),
                    backgroundColor: Colors.green,
                  ),
                );

                // Refresh the list of knowledge bases after linking
                _fetchAssistantKnowledges();
              } else if (state is AssistantRemovingKnowledge) {
                // Show loading indicator or status if needed
              } else if (state is AssistantKnowledgeRemoved) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Knowledge base removed successfully'),
                    backgroundColor: Colors.green,
                  ),
                );

                // Refresh the list of knowledge bases after removal
                _fetchAssistantKnowledges();
              } else if (state is AssistantKnowledgeRemoveFailed) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Failed to remove knowledge base: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is AssistantKnowledgeLinkFailed) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content:
                        Text('Failed to link knowledge base: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is ValidatingSlackBot) {
                // Keep validating indicator              } else if (state is SlackBotValidated) {
                setState(() {
                  _isValidatingSlackBot = false;
                 // _validatedSlackBotInfo = state.botInfo;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content:
                        Text('Slack bot configuration validated successfully'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 3),
                  ),
                );
                
                // Automatically publish the bot after successful validation
                _publishSlackBot();

                // Automatically publish the bot after successful validation
                _publishSlackBot();              } else if (state is SlackBotValidationFailed) {
                setState(() => _isValidatingSlackBot = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Slack validation failed: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is PublishingSlackBot) {
                // Keep publishing indicator
              } else if (state is SlackBotPublished) {
                setState(() {
                  _isPublishingToSlack = false;
                  _slackBotUrl = state.slackBotUrl;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Slack bot published successfully'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 3),
                  ),
                );

                // If the URL is available, we could display it or offer to open it
                if (_slackBotUrl != null && _slackBotUrl!.isNotEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Slack authorization URL: ${_slackBotUrl!.substring(0, 50)}...'),
                      duration: const Duration(seconds: 10),
                      action: SnackBarAction(
                        label: 'COPY',
                        onPressed: () {
                          Clipboard.setData(ClipboardData(text: _slackBotUrl!));
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('URL copied to clipboard'),
                              duration: Duration(seconds: 1),
                            ),
                          );
                        },
                      ),
                    ),
                  );
                }
              } else if (state is SlackBotPublishFailed) {
                setState(() => _isPublishingToSlack = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Failed to publish Slack bot: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
              } else if (state is PublishingSlackBot) {
                // Keep publishing indicator
              } else if (state is SlackBotPublished) {
                setState(() {
                  _isPublishingToSlack = false;
                  _slackBotUrl = state.slackBotUrl;
                });

                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Slack bot published successfully'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 3),
                  ),
                );

                // If the URL is available, we could display it or offer to open it
                if (_slackBotUrl != null && _slackBotUrl!.isNotEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Slack authorization URL: ${_slackBotUrl!.substring(0, 50)}...'),
                      duration: const Duration(seconds: 10),
                      action: SnackBarAction(
                        label: 'COPY',
                        onPressed: () {
                          Clipboard.setData(ClipboardData(text: _slackBotUrl!));
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text('URL copied to clipboard'),
                              duration: Duration(seconds: 1),
                            ),
                          );
                        },
                      ),
                    ),
                  );
                }
              } else if (state is SlackBotPublishFailed) {
                setState(() => _isPublishingToSlack = false);

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Failed to publish Slack bot: ${state.message}'),
                    backgroundColor: Colors.red,
                  ),
                );
